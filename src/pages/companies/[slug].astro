---
// layout
import BaseLayout from "@layouts/BaseLayout.astro";

export const prerender = false;

// Get the slug from the URL
const { slug } = Astro.params;

// Mock data for local testing
const mockData = {
    "success": true,
    "data": {
        "companies": [
            {
                "id": "7a138fb6-b35f-4ea8-b47e-3467457504b1",
                "name": "Aarden",
                "slug": "aarden",
                "url": "https://aarden.ai/",
                "description": null,
                "logo": "/uploads/uploadedfiles/company-ab0883ab-b2ef-4b8a-9fd3-32f4ab6696e7.png",
                "alumn": true,
                "fir": true,
                "memberCount": 3,
                "members": [
                    {
                        "name": "Ben Hudson",
                        "linkedin": "https://www.linkedin.com/in/hudsonbd/"
                    },
                    {
                        "name": "Danan Margason",
                        "linkedin": "https://www.linkedin.com/in/dananmargason/"
                    },
                    {
                        "name": "Jasper Croom",
                        "linkedin": "https://www.linkedin.com/in/jaspercroome/"
                    }
                ]
            },
            {
                "id": "8e3efd99-8b9d-4484-aa3c-a9ceb41bf09b",
                "name": "Actual AI",
                "slug": "actual-ai",
                "url": "https://www.actual.ai/",
                "description": "Actual AI is an AI-native engineering management tool that measures velocity and summarizes progress to reduce management overhead and optimize team performance. VPs of Engineering can gain an objective view of progress and productivity across their entire organization down to the level of the individual developer including the ability to see the velocity and quality impacts of AI tools, such as Cursor. Engineering managers can generate work summaries for standups, 1:1s, team meetings, leadership updates, and promotion documents, saving time and aligning effort with business priorities in real time.",
                "logo": "/uploads/uploadedfiles/company-ce0233e7-0818-47ef-9c64-7ced6fb2b4ec.png",
                "alumn": true,
                "fir": true,
                "memberCount": 2,
                "members": [
                    {
                        "name": "Ethan Byrd",
                        "linkedin": "https://www.linkedin.com/in/etbyrd/"
                    },
                    {
                        "name": "John Kennedy",
                        "linkedin": "https://www.linkedin.com/in/johnakennedy/"
                    }
                ]
            },
            {
                "id": "c8491266-8097-4dc3-b708-f718b43f86b5",
                "name": "Adyn",
                "slug": "adyn",
                "url": "https://adyn.com",
                "description": null,
                "logo": "/uploads/uploadedfiles/company-1a584240-411f-42fc-9d2c-b862d2de5ddb.jpg",
                "alumn": false,
                "fir": false,
                "memberCount": 1,
                "members": [
                    {
                        "name": "Elizabeth Ruzzo",
                        "linkedin": "https://www.linkedin.com/in/elizabethruzzophd/"
                    }
                ]
            }
        ]
    }
};

// Determine if we're running locally
const isLocal = import.meta.env.DEV || Astro.url.hostname === 'localhost' || Astro.url.hostname === '127.0.0.1';

// Fetch company data
let company = null;
let error = null;

try {
	let data;
	
	if (isLocal) {
		// Use mock data for local testing
		console.log('Using mock data for local testing');
		data = mockData;
	} else {
		// Fetch from API in production
		const response = await fetch(`https://ai.seattlefoundations.org/api/companies?t=${Date.now()}`, {
			method: 'GET',
			headers: { 'Accept': 'application/json' }
		});
		
		if (response.ok) {
			data = await response.json();
		} else {
			throw new Error(`API responded with status ${response.status}`);
		}
	}
	
	const companies = data?.success && data?.data?.companies ? data.data.companies : [];
	company = companies.find(c => c.slug === slug);
	
} catch (e) {
	error = e;
	console.error('Error fetching company:', e);
}

// Helper function for company logo URL
function companyLogoUrl(relativeUrl: string): string {
	return new URL(relativeUrl, 'https://ai.seattlefoundations.org').toString();
}

// Prepare company URL with UTM parameters
const urlWithUtm = company?.url ? 
	`${company.url}${company.url.includes('?') ? '&' : '?'}utm_source=seattlefoundations&utm_medium=directory&utm_campaign=company_profile` : 
	null;
const hostname = company?.url ? new URL(company.url).hostname : '';

// Set page title
const pageTitle = company ? `${company.name} - Foundations` : 'Company - Foundations';
---

<BaseLayout title={pageTitle} description="Foundations Founder in Residence Company">
	<section class="site-container space-y-12 pt-20">
		<!-- Breadcrumbs -->
		<div class="mx-auto max-w-5xl px-4 sm:px-6 lg:px-8">
			<div class="mb-4">
				<div class="text-sm">
					<a href="/companies" class="hover:text-primary-600 text-gray-500">‚Üê Back to Companies</a>
				</div>
			</div>

			{isLocal && (
				<div class="mb-4 rounded-lg bg-yellow-50 p-4 dark:bg-yellow-900/20">
					<p class="text-sm text-yellow-800 dark:text-yellow-300">
						üîß Local Development Mode - Using mock data. Available slugs: aarden, actual-ai, adyn
					</p>
				</div>
			)}

			{error ? (
				<!-- Error state -->
				<div class="mx-auto max-w-5xl text-center">
					<div class="rounded-lg bg-red-50 p-8 dark:bg-red-900/20">
						<p class="text-lg text-red-800 dark:text-red-300">Failed to load company</p>
						<p class="mt-2 text-sm text-red-600 dark:text-red-400">Please try again later.</p>
					</div>
				</div>
			) : !company ? (
				<!-- Company not found -->
				<div class="mx-auto max-w-5xl text-center">
					<div class="rounded-lg bg-gray-50 p-8 dark:bg-gray-800/50">
						<p class="text-lg text-gray-600 dark:text-gray-300">Company not found.</p>
						{isLocal && (
							<p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
								Try one of these slugs: aarden, actual-ai, adyn
							</p>
						)}
					</div>
				</div>
			) : (
				<!-- Company details -->
				<div class="mx-auto max-w-5xl">
					<div class="mb-8 overflow-hidden rounded-lg bg-white shadow">
						<div class="p-6">
							<div class="flex flex-col md:flex-row md:items-start">
								{company.logo && (
									<div class="mt-1 mb-4 flex-shrink-0 md:mr-6 md:mb-0">
										<img src={companyLogoUrl(company.logo)} alt={`${company.name} logo`} class="max-h-32 max-w-32 object-contain" />
									</div>
								)}
								<div class={`flex-1 ${!company.logo ? 'md:pl-0' : ''}`}>
									<div class="flex flex-wrap items-center justify-between">
										<div>
											<h1 class="text-2xl font-semibold text-gray-900">{company.name}</h1>
											<div class="mt-2 flex items-center gap-2">
												{company.alumn && (
													<span class="bg-primary-500/40 text-primary-800 inline-flex items-center rounded-full px-3 py-1 text-sm font-medium">Alumni</span>
												)}
												{company.fir ? (
													<span class="bg-gray-500/40 text-gray-800 inline-flex items-center rounded-full px-3 py-1 text-sm font-medium">Founder in Residence</span>
												) : (
													<span class="bg-green-500/40 text-green-800 inline-flex items-center rounded-full px-3 py-1 text-sm font-medium">Member</span>
												)}
											</div>
										</div>
										{urlWithUtm && (
											<a href={urlWithUtm} target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:underline">
												{hostname}
											</a>
										)}
									</div>
									{company.description && (
										<p class="mt-2 text-gray-600">{company.description}</p>
									)}
								</div>
							</div>
						</div>
					</div>

					{company.members && company.members.length > 0 && (
						<div class="mb-8">
							<h2 class="mb-4 text-xl font-medium text-gray-900">Active Founders</h2>
							<div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
								{company.members.map((member) => (
									<div class="space-y-2 rounded-lg bg-white px-6 py-4 shadow-sm">
										<h3 class="text-lg font-medium text-gray-900">{member.name}</h3>
										{member.linkedin && (
											<a href={member.linkedin} target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:text-primary-700 inline-flex items-center text-sm">
												<svg class="mr-1 h-4 w-4" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
													<path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.454C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.225 0z" />
												</svg>
												LinkedIn
											</a>
										)}
									</div>
								))}
							</div>
						</div>
					)}
				</div>
			)}
		</div>
	</section>
</BaseLayout>