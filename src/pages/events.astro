---
/**
 * Events page that fetches and displays upcoming events from the API
 */
import { Icon } from "astro-icon/components";

// main layout
import BaseLayout from "@layouts/BaseLayout.astro";

// components
import Button from "@components/Button/Button.astro";
---

<BaseLayout title="Events - Seattle Foundations" description="Upcoming events at Seattle Foundations">
	<section class="site-container space-y-12">
		<div
			class="overflow-x-clip bg-[url('/assets/pattern-light.svg')] bg-center bg-no-repeat pt-24 md:pt-32 dark:bg-none"
		>
			<div class="mx-auto flex max-w-[950px] flex-col justify-center">
				<h1 class="h1 text-center">Upcoming Events</h1>
			</div>
		</div>

		<!-- Loading state -->
		<div id="loading" class="mx-auto max-w-2xl text-center">
			<div class="rounded-lg bg-gray-50 p-8 dark:bg-gray-800/50">
				<div class="mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-4 border-gray-300 border-t-primary-600"></div>
				<p class="text-lg text-gray-600 dark:text-gray-300">Loading events...</p>
			</div>
		</div>

		<!-- Error state (hidden by default) -->
		<div id="error" class="mx-auto max-w-2xl text-center hidden">
			<div class="rounded-lg bg-red-50 p-8 dark:bg-red-900/20">
				<Icon name="tabler/alert-triangle" class="mx-auto mb-4 h-12 w-12 text-red-600 dark:text-red-400" />
				<p class="text-lg text-red-800 dark:text-red-300">Failed to load events</p>
				<p class="mt-2 text-sm text-red-600 dark:text-red-400">Please try again later.</p>
			</div>
		</div>

		<!-- Empty state (hidden by default) -->
		<div id="empty" class="mx-auto max-w-2xl text-center hidden">
			<div class="rounded-lg bg-gray-50 p-8 dark:bg-gray-800/50">
				<Icon name="tabler/calendar-check" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
				<p class="text-lg text-gray-600 dark:text-gray-300">No upcoming events at this time.</p>
				<p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Check back soon for new events!</p>
			</div>
		</div>

		<!-- Events container (hidden by default) -->
		<div id="events-container" class="space-y-6 hidden"></div>
	</section>
</BaseLayout>

<script>
	// Types for the API response
	interface Event {
		id: string;
		name: string;
		description: string;
		date: string;
		startTime: string;
		endTime: string;
		link: string | null;
	}

	interface EventsResponse {
		success: boolean;
		events: Event[];
	}

	// Helper function to format date
	function formatDate(dateString: string): string {
		const date = new Date(dateString);
		return date.toLocaleDateString('en-US', { 
			weekday: 'long',
			year: 'numeric',
			month: 'long',
			day: 'numeric'
		});
	}

	// Helper function to format time
	function formatTime(time: string): string {
		const [hours, minutes] = time.split(':');
		const hour = parseInt(hours);
		const ampm = hour >= 12 ? 'PM' : 'AM';
		const displayHour = hour % 12 || 12;
		return `${displayHour}:${minutes} ${ampm}`;
	}

	// Helper function to get month and day
	function getMonthDay(dateString: string): { month: string; day: string } {
		const date = new Date(dateString);
		const month = date.toLocaleDateString('en-US', { month: 'short' }).toUpperCase();
		const day = date.getDate().toString();
		return { month, day };
	}

	// Create event card HTML
	function createEventCard(event: Event): string {
		const { month, day } = getMonthDay(event.date);
		
		return `
			<div class="group relative overflow-hidden rounded-lg border border-gray-200 bg-white p-6 shadow-sm transition-all hover:shadow-lg dark:border-gray-700 dark:bg-gray-800">
				<div class="flex flex-col gap-6 md:flex-row">
					<!-- Date Badge -->
					<div class="flex-shrink-0">
						<div class="flex h-20 w-20 flex-col items-center justify-center rounded-lg bg-primary-100 dark:bg-primary-900/30">
							<span class="text-xs font-semibold text-primary-600 dark:text-primary-400">${month}</span>
							<span class="text-2xl font-bold text-primary-700 dark:text-primary-300">${day}</span>
						</div>
					</div>

					<!-- Event Details -->
					<div class="flex-grow">
						<h3 class="mb-2 text-xl font-semibold text-gray-900 dark:text-gray-100">
							${event.name}
						</h3>
						
						<div class="mb-3 flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
							<div class="flex items-center gap-1">
								<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
								</svg>
								<span>${formatDate(event.date)}</span>
							</div>
							<div class="flex items-center gap-1">
								<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
								</svg>
								<span>${formatTime(event.startTime)} - ${formatTime(event.endTime)}</span>
							</div>
						</div>

						<p class="mb-4 line-clamp-3 text-gray-600 dark:text-gray-300">
							${event.description}
						</p>

						${event.link ? `
							<a href="${event.link}" target="_blank" rel="noopener noreferrer" 
								class="inline-flex items-center gap-1 rounded-md bg-primary-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:bg-primary-500 dark:hover:bg-primary-600">
								<span>Register</span>
								<svg class="ml-1 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
								</svg>
							</a>
						` : ''}
					</div>
				</div>
			</div>
		`;
	}

	// Fetch and display events
	async function loadEvents() {
		const loadingEl = document.getElementById('loading');
		const errorEl = document.getElementById('error');
		const emptyEl = document.getElementById('empty');
		const containerEl = document.getElementById('events-container');

		// Reset visibility states
		loadingEl?.classList.remove('hidden');
		errorEl?.classList.add('hidden');
		emptyEl?.classList.add('hidden');
		containerEl?.classList.add('hidden');

		try {
			// Check if we're in development or production
			const isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
			
			// Use direct API in development, Netlify function in production
			const apiUrl = isDevelopment 
				? `https://ai.seattlefoundations.org/api/calendar/events?t=${Date.now()}`
				: `/.netlify/functions/events?t=${Date.now()}`;
			
			const response = await fetch(apiUrl, {
				method: 'GET',
				headers: {
					'Cache-Control': 'no-cache, no-store, must-revalidate',
					'Pragma': 'no-cache'
				}
			});
			
			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}
			
			const data: EventsResponse = await response.json();
			
			// Hide loading
			loadingEl?.classList.add('hidden');
			
			if (data.success && data.events && data.events.length > 0) {
				// Sort events by date
				const sortedEvents = data.events.sort((a, b) => 
					new Date(a.date).getTime() - new Date(b.date).getTime()
				);
				
				// Create event cards
				const eventsHTML = sortedEvents.map(event => createEventCard(event)).join('');
				
				// Display events
				if (containerEl) {
					containerEl.innerHTML = eventsHTML;
					containerEl.classList.remove('hidden');
				}
			} else {
				// Show empty state
				emptyEl?.classList.remove('hidden');
			}
		} catch (error) {
			console.error('Error fetching events:', error);
			// Hide loading and show error
			loadingEl?.classList.add('hidden');
			errorEl?.classList.remove('hidden');
		}
	}

	// Load events when page loads
	loadEvents();

	// Reload events when page becomes visible (e.g., when navigating back)
	document.addEventListener('visibilitychange', () => {
		if (!document.hidden) {
			loadEvents();
		}
	});

	// Also reload when navigating to the page using browser back/forward
	window.addEventListener('pageshow', (event) => {
		if (event.persisted) {
			loadEvents();
		}
	});
</script> 